#!/bin/bash
MIGIT_NAME="$(basename "$0")"
VERSION="0.9.40"
VERSION_STRING="$VERSION Copyright (C) 2023-2024 Thilo Graf, License: GPL2"

EXEC_CALL="$0 $@"

#set -e
#set -x

TRUE="1"
FALSE="0"

# Default values for the variables
GIT_SOURCE_URL="$1"
TARGET_REPO_PREFIX=""
TARGET_REPO_SUFFIX=""
GIT_PROJECT_NAME=""
GIT_COMMIT_INTRO=""
GIT_COMMIT_SUFFIX=""
GIT_SSH_KEYFILE=""
NO_BACKUPS="$FALSE"
RESET="$FALSE"

CUR_DIR=$(pwd)
export WORKDIR=$CUR_DIR/work
ORIGIN_REPO_NAME=".origin-tmp"
GIT_TEMP_REPO=""
GIT_WORKING_COPY_DIR=$WORKDIR/origin
DEPLOY_DIR="$CUR_DIR/deploy"
MAILMAP_FILE="$CUR_DIR/.mailmap"
MESSAGES_REWRITE="$TRUE"
NO_PROGRESS="$FALSE"
PRUNE_EMPTY=""
REPLACE_REVS=""
PRUNE_DEGENERATE=""
NO_FF=""

REPOLIST="."
EXCLUDE_REPOLIST=""
BRANCH_LIST=
GIT_FILTER_REPO_NAME="git-filter-repo"
GIT_FILTER_REPO_EXEC=$(which git-filter-repo)

ERRORS=""
WARNINGS=""
NOTES=""
generated_repos=""

# Defaults for origin commit URL web-links
GIT_SRC_COMMIT_URL_PREFIX=""
GIT_SRC_COMMIT_URL_SUFFIX=""
GIT_ORIGIN_COMMIT_URL_BASE=

###############################################################################
# Function to display script help
###############################################################################
show_help() {
	echo
	echo " ------------------------------------------------------------------"
	echo " $MIGIT_NAME"
	echo " Version: $VERSION_STRING"
	echo
	echo " Script tool for extracting subdirectories into individual"
	echo " repositories and rewriting Git repositories for a clean history,"
	echo " based on the functionality of $GIT_FILTER_REPO_NAME."
	echo " ------------------------------------------------------------------"
	echo
	echo " Usage:"
	echo "  $0 <clone url> [OPTIONS]	        Clone URL of the Git repository that needs to be rewritten or from which subdirectories should be extracted into separate repositories."
	echo "  $0 -u <clone url> [OPTIONS]"
	echo
	echo " Options:"
	echo "  Subdirectories to extract:"
	echo "  -S, --subdir                            Subdirectory which to be rewritten."
	echo "                                          If a complete root directory, meaning the repository at once, should be rewritten, specify only a dot without any further directories '--subdir .'"
	echo "      --subdir-list=<LIST>                List of subdirectories to be rewritten. The list must be enclosed in ''. Use spaces as separators (Default: All subdirectories of the first level within the root directory)"
	echo "      --exclude-subdir-list=<LIST>        Subdirectories to be ignored. The list must be enclosed in ''. Use spaces as separators."
	echo "                                          NOTE! Only use this option if the --subdir-list= and --subdir option are not specified!"
	echo
	echo "  Branches:"
	echo "      --branch-list=<BRANCH1 BRANCH2...>  List of branches to rewrite. An empty list includes all branches."
	echo
	echo "  Deploy repositories:"
	echo "  -d, --deploy-dir=<DIR>                  Output directory in which the rewritten repositories will be placed. Default:    $DEPLOY_DIR"
	echo "  -p, --project-name-prefix=<PREFIX>      Prefix of the target folder to be prepended to the extracted repository name.    $DEPLOY_DIR/TARGET-ROOT-PROJECT/<prefix>REPO"
	echo "  -s, --project-name-suffix=<SUFFIX>      Suffix of the target folder to be appended to the extracted repository name.     $DEPLOY_DIR/TARGET-ROOT-PROJECT/REPO<suffix>"
	echo "                                          You can also combine both options:                                               $DEPLOY_DIR/TARGET-ROOT-PROJECT/<prefix>REPO<suffix>"
	echo "      --no-backups                        Older extracted repositories will be overwritten. Only the latest extracted repositories are always stored in the deployment folder."
	echo "  -T, --target-root-project-name=<NAME>   Name of the target folder within the deploy directory. Default: Current date and time of the rewrite."
	echo
	echo "  Commit messages:"
	echo "  -n, --no-rewrite-messages               Commit messages will not be touched, but paths will still be rewritten, and if a .mailmap file is available, authors will also be rewritten."
	echo "                                          When using -n, no commit introduction is added, even without specifying --commit-introduction."
	echo "                                          When using -n, no commit introduction is added, even without specifying --commit-introduction."
	echo "  -P, --prefix-source-url=<PREFIX>        Prefix for the source commit URL. This sets the prefix for the link to the source commit, which is prepended to the commit ID."
	echo "      --suffix-source-url=<SUFFIX>        Suffix for the source commit URL. This sets the suffix for the link to the source commit, which is apended to the prefix (option -P) commit ID. Default: '/commit'"
	echo "	                                        Note: --pattern-source-url=<PATTERN>	Obsolete: The same like --prefix-source-url"
	echo "      --commit-introduction=<INTRO>       Intro for commit introductions in the first line of all commits. Default: the respective subdirectory name or the original repo name."
	echo "                                          This only makes sense if a single repo is to be rewritten or if a consistent introduction of the commit message is desired."
	echo "      --commit-suffix=<SUFFIX>            Adds a signature at the end of the modified commit message e.g a text 'Automatically migrated by Migit v.$VERSION'"
	echo "      --reset                             Revert all rewritten commit messages to their original state, provided they are recognized as such."
	echo
	echo "  Commits:                                NOTE: These commit options correspond to those of git-filter-repo and are directly passed through to git-filter-repo:"
	echo "      --replace-refs {delete-no-add, delete-and-add, update-no-add, update-or-add, update-and-add}"
	echo "                                          Replace refs (see git-replace(1)) are used to rewrite parents (unless turned off by the usual git mechanism); this flag specifies what do do with those"
	echo "                                          refs afterward. Replace refs can either be deleted or updated to point at new commit hashes. Also, new replace refs can be added for each commit"
	echo "                                          rewrite. With 'update-or-add', new replace refs are only added for commit rewrites that aren't used to update an existing replace ref. default is"
	echo "                                          'update-and-add' if $GIT_DIR/filter-repo/already_ran does not exist; 'update-or-add' otherwise."
	echo "      --prune-empty {always, auto, never} Whether to prune empty commits. 'auto' (the default) means only prune commits which become empty (not commits which were empty in the original repo,"
	echo "                                          unless their parent was pruned). When the parent of a commit is pruned, the first non-pruned ancestor becomes the new parent."
	echo "      --prune-degenerate {always, auto, never}"
	echo "                                          Since merge commits are needed for history topology, they are typically exempt from pruning. However, they can become degenerate with the pruning of"
	echo "                                          other commits (having fewer than two parents, having one commit serve as both parents, or having one parent as the ancestor of the other.) If such merge"
	echo "                                          commits have no file changes, they can be pruned. The default ('auto') is to only prune empty merge commits which become degenerate (not which started"
	echo "                                          as such)."
	echo "      --no-ff                             Even if the first parent is or becomes an ancestor of another parent, do not prune it. This modifies how --prune-degenerate behaves, and may be useful"
	echo "                                          in projects who always use merge --no-ff."
	echo
	echo "  Normalize e-mails of authors:"
	echo "  -m, --mailmap-file=<PATH>               Path to the mailmap file. If not specified, it will be searched for inside the script root folder by default. If no .mailmap file was found, normalization will be skipped."
	echo
	echo "  ssh access:"
	echo "      --id-rsa-file=<PATH>                Path to your privat key file e.g. ~/.ssh/id_rsa"
	echo
	echo "  Global:"
	echo "  -v, --version                           Show $MIGIT_NAME version"
	echo "  -h, --help                              Show this help"
	echo "  -q                                      Do not show progress."
}

###############################################################################
# Validate if git-filter-repo is installed
###############################################################################
if [ -z "$GIT_FILTER_REPO_EXEC" ]; then
	echo " -------------------------------------------------------------------"
	echo " $GIT_FILTER_REPO_NAME is not installed."
	echo " Make sure $GIT_FILTER_REPO_NAME is installed."
	echo " https://github.com/newren/$GIT_FILTER_REPO_NAME#how-do-i-install-it"
	echo " -------------------------------------------------------------------"
	echo
	show_help
	exit 1
fi

# Define options
OPTIONS=u:nP:T:p:s:S:d:m:qhv
LONGOPTIONS=branch-list:,id-rsa-file:,prefix-source-url:,suffix-source-url:,target-root-project-name:,project-name-prefix:,project-name-suffix:,subdir-list:,exclude-subdir-list:,commit-introduction:,commit-suffix:,deploy-dir:,mailmap-file:,no-backups,version,help,reset,replace-refs:,prune-empty:,prune-degenerate:,no-ff

# For downward compatibility
OPTIONS_OBSOLETE=
LONGOPTIONS_OBSOLETE=,pattern-source-url:

OPTIONS+=$OPTIONS_OBSOLETE
LONGOPTIONS+=$LONGOPTIONS_OBSOLETE

###############################################################################
# Parse options with getopt
###############################################################################
PARSED=$(getopt --options=$OPTIONS --longoptions=$LONGOPTIONS --name "$0" -- "$@")
if [ $? != 0 ]; then
	# getopt returned an error
	exit 2
fi

# Evaluate parsed argument strings
eval set -- "$PARSED"

# Walk through options
while true; do
	case "$1" in
		-u)
		GIT_SOURCE_URL="$2"
		shift 2
		;;
		-n)
		MESSAGES_REWRITE="$FALSE"
		shift
		;;
		-P)
		GIT_SRC_COMMIT_URL_PREFIX="$2"
		shift 2
		;;
		-T)
		GIT_PROJECT_NAME="$2"
		shift 2
		;;
		-p)
		TARGET_REPO_PREFIX="$2"
		shift 2
		;;
		-s)
		TARGET_REPO_SUFFIX="$2"
		shift 2
		;;
		-S)
		REPOLIST="$2"
		shift 2
		;;
		-d)
		DEPLOY_DIR="$2"
		shift 2
		;;
		-m)
		MAILMAP_FILE="$2"
		shift 2
		;;
		-q)
		NO_PROGRESS="$TRUE"
		shift
		;;
		-h|--help)
		show_help
		exit 0
		;;
		-v|--version)
		echo "$VERSION"
		exit 0
		;;
		--id-rsa-file)
		GIT_SSH_KEYFILE="$2"
		shift 2
		;;
		--prefix-source-url)
		GIT_SRC_COMMIT_URL_PREFIX="$2"
		shift 2
		;;
		--suffix-source-url)
		GIT_SRC_COMMIT_URL_SUFFIX="$2"
		shift 2
		;;
		--pattern-source-url)
		GIT_SRC_COMMIT_URL_PREFIX="$2"
		shift 2
		;;
		--target-root-project-name)
		GIT_PROJECT_NAME="$2"
		shift 2
		;;
		--project-name-prefix)
		TARGET_REPO_PREFIX="$2"
		shift 2
		;;
		--project-name-suffix)
		TARGET_REPO_SUFFIX="$2"
		shift 2
		;;
		--branch-list)
		BRANCH_LIST="$2"
		shift 2
		;;
		--subdir-list)
		REPOLIST="$2"
		shift 2
		;;
		--exclude-subdir-list)
		EXCLUDE_REPOLIST="$2"
		shift 2
		;;
		--commit-introduction)
		GIT_COMMIT_INTRO="$2"
		shift 2
		;;
		--commit-suffix)
		GIT_COMMIT_SUFFIX="$2"
		shift 2
		;;
		--deploy-dir)
		DEPLOY_DIR="$2"
		shift 2
		;;
		--mailmap-file)
		MAILMAP_FILE="$2"
		shift 2
		;;
		--no-backups)
		NO_BACKUPS="$TRUE"
		shift
		;;
		--reset)
		RESET="$TRUE"
		shift
		;;
		--replace-refs)
		REPLACE_REVS="--replace-refs $2"
		shift 2
		;;
		--prune-empty)
		PRUNE_EMPTY="--prune-empty $2"
		shift 2
		;;
		--prune-degenerate)
		PRUNE_DEGENERATE="--prune-degenerate $2"
		shift 2
		;;
		--no-ff)
		NO_FF="--no-ff"
		shift
		;;
		--)
		shift
		break
		;;
		*)
		echo "Unexpected option: $1"
		exit 3
		;;
	esac
done

###############################################################################
# If quiet mode is on, log minimal info
###############################################################################
if [[ "$NO_PROGRESS" == "$TRUE" ]]; then
	echo -e "------------------------------------------"
	echo -e "[$(date +"%Y-%m-%d %H:%M:%S")] [$EXEC_CALL]"
fi

###############################################################################
# Function to handle script exit with desired behavior
###############################################################################
my_exit() {
	local exit_code=$1
	if [[ "$NO_PROGRESS" == "$TRUE" ]]; then
		# Only exit code 0 if in quiet mode
		exit 0
	else
		exit $exit_code
	fi
}

###############################################################################
# Check if the required clone URL is provided
###############################################################################
if [[ -z "$GIT_SOURCE_URL" ]]; then
	echo "Clone URL was not specified."
	show_help
	my_exit 1
elif [[ "$GIT_SOURCE_URL" == file:* ]]; then
	echo "Invalid protocol: 'file://' is not allowed. Please use a relative path to a valid git repository for local access."
	my_exit 1
fi

# get absolute path of the current script
SCRIPT_DIR=$(realpath "$(dirname "$0")")

###############################################################################
# Extract the absolute path from GIT_SOURCE_URL if it's a local path
###############################################################################
if [[ "$GIT_SOURCE_URL" == file://* ]]; then
	GIT_REPO_PATH=$(realpath "${GIT_SOURCE_URL:7}")
elif [[ "$GIT_SOURCE_URL" == /* ]]; then
	GIT_REPO_PATH=$(realpath "$GIT_SOURCE_URL")
elif [[ "$GIT_SOURCE_URL" == ./* || "$GIT_SOURCE_URL" == ./ ]]; then
	GIT_REPO_PATH=$(realpath "$GIT_SOURCE_URL")
else
	# it's not a local path
	GIT_REPO_PATH=""
fi

# Check if GIT_REPO_PATH is within the script's directory
if [[ -n "$GIT_REPO_PATH" && "$GIT_REPO_PATH" == "$SCRIPT_DIR"* ]]; then
	echo "Error: The specified git URL ('$GIT_SOURCE_URL') is located within the script's directory. Please use a different URL."
	my_exit 1
fi

###############################################################################
# Create deploy directory if not existing
###############################################################################
mkdir -p "$DEPLOY_DIR"

###############################################################################
# Set GIT_TEMP_REPO based on GIT_REPO_PATH; fallback if empty to avoid
# 'basename: missing operand' errors
###############################################################################
if [ -n "$GIT_REPO_PATH" ]; then
	TEMP_BASENAME=$(basename "$GIT_REPO_PATH")
	GIT_TEMP_REPO="${WORKDIR}/${ORIGIN_REPO_NAME}_${TEMP_BASENAME}"
else
	GIT_TEMP_REPO="${WORKDIR}/${ORIGIN_REPO_NAME}"
fi

# If the temporary repo folder already exists, remove it
if [ -d "$GIT_TEMP_REPO/.git" ]; then
	rm -rf "$GIT_TEMP_REPO"
fi

###############################################################################
# Function that replaces echo; removes ANSI colors in quiet mode
###############################################################################
my_echo() {
	if [ "$NO_PROGRESS" == "$FALSE" ]; then
		echo "${@}"
	else
		# If quiet, strip color codes
		echo "${@}" | sed -r "s/\x1B\[[0-9;]*[a-zA-Z]//g"
	fi
}

###############################################################################
# Function to display a spinner while a process is running in the background
###############################################################################
show_spinner() {
	local pid="$1"
	local message="$2"
	local spinner="/-\|"

	while kill -0 "$pid" 2>/dev/null; do
		for i in $(seq 0 3); do
			if [[ "$NO_PROGRESS" == "$FALSE" ]]; then
				my_echo -ne "\r[${spinner:$i:1}] ${message}"
				sleep 0.1
			fi
		done
	done

	wait "$pid"
	local error_code=$?

	if [ "$error_code" -eq 0 ]; then
		if [[ "$NO_PROGRESS" == "$FALSE" ]]; then
			my_echo -ne "\r[\e[32m✓\e[0m] ${message}\n"
		fi
	else
		my_echo -ne "\r[✗] ${message} Error: ${error_code}\n"
	fi
}

# get start time for performance measurement
start=$(date +%s)

###############################################################################
# Clone the repository
###############################################################################
if [[ "$NO_PROGRESS" == "$FALSE" ]]; then
	my_echo -n "[ ] Clone: $GIT_SOURCE_URL"
fi

clone_repo() {
	git clone "$GIT_SOURCE_URL" "$GIT_TEMP_REPO" > /dev/null 2>&1
}

handle_clone_error() {
	my_echo -e "\e[1A[\e[31m✗\e[0m] Clone failed: $GIT_SOURCE_URL"
	my_exit 1
}

# If no SSH key is specified, do a normal git clone
if [[ "$GIT_SSH_KEYFILE" == "" ]]; then
	clone_repo &
else
	# If SSH key is specified, check if file exists
	if [ -f "$GIT_SSH_KEYFILE" ]; then
		GIT_SSH_COMMAND="ssh -i $GIT_SSH_KEYFILE" clone_repo &
	else
		my_echo -e "\r[\e[33m✗\e[0m] Clone: Wrong or missing ssh key file: $GIT_SSH_KEYFILE"
		my_exit 1
	fi
fi

spinner_pid=$!
show_spinner $spinner_pid "Clone"

# Do not wait again on $!, show_spinner already waits for $pid
if [[ $? -ne 0 ]]; then
	handle_clone_error
fi

###############################################################################
# Pull all relevant branches from origin, create local branches if missing
###############################################################################
local_branches=$(git -C "$GIT_TEMP_REPO" branch | sed 's/\*//g' | awk '{$1=$1};1')

git -C "$GIT_TEMP_REPO" branch -r | grep -v '\->' | while read remote; do
	branch_name="${remote#origin/}"
	# If BRANCH_LIST is empty or matches the branch_name
	if [[ -z "$BRANCH_LIST" ]] || echo "$BRANCH_LIST" | grep -qw "$branch_name"; then
		if ! echo "$local_branches" | grep -q "^$branch_name$"; then
			if [[ "$NO_PROGRESS" == "$FALSE" ]]; then
				my_echo -n "[ ] Create missing branch: ${branch_name}"
			fi
			git -C "$GIT_TEMP_REPO" checkout -b "$branch_name" "$remote" > /dev/null 2>&1 &
			spinner_pid=$!
			show_spinner $spinner_pid "Create missing branch: ${branch_name}"
		fi
	fi
done

###############################################################################
# Remove old working copy if it exists, then copy from the original repo
###############################################################################
if [ -d "$GIT_WORKING_COPY_DIR" ]; then
	rm -rf "$GIT_WORKING_COPY_DIR"
fi

cp -rf "$GIT_TEMP_REPO" "$GIT_WORKING_COPY_DIR"

# Switch to the temporary repository
cd "$GIT_TEMP_REPO"

###############################################################################
# Create a repository list for subdirectories to be extracted
# If no subdir was set, take all first-level folders
###############################################################################
if [[ -z "$REPOLIST" ]]; then
	REPOLIST=$(ls -d */ 2>/dev/null | sed 's#/##')
fi

# Remove entries from EXCLUDE_REPOLIST if present
for entry in $EXCLUDE_REPOLIST; do
	REPOLIST=$(my_echo "$REPOLIST" | sed "s|$entry|""|g")
done

###############################################################################
# If target project name is not specified, derive it from the clone URL
###############################################################################
if [[ "$GIT_PROJECT_NAME" == "" ]]; then
	GIT_PROJECT_NAME=$(basename "$GIT_SOURCE_URL" | sed 's/\.git//')
fi

###############################################################################
# Clean older symlink if present, and remove older repos if backups are disabled
###############################################################################
if [[ -e "$DEPLOY_DIR/$GIT_PROJECT_NAME" ]]; then
	unlink "$DEPLOY_DIR/$GIT_PROJECT_NAME"
fi

if [[ "$NO_BACKUPS" == "$TRUE" ]]; then
	rm -rf "$DEPLOY_DIR/$GIT_PROJECT_NAME-"*
fi

###############################################################################
# If no prefix is set, add a default suffix '/commit'
###############################################################################
if [[ "$GIT_SRC_COMMIT_URL_PREFIX" == "" ]]; then
	GIT_SRC_COMMIT_URL_SUFFIX="/commit"
fi

if [[ "$GIT_SRC_COMMIT_URL_PREFIX" == "" ]]; then
	GIT_PROJECT_NAME=$(basename "$GIT_SOURCE_URL" | sed 's/\.git//')
	url="$GIT_SOURCE_URL"
	GIT_SRC_COMMIT_URL_PREFIX="${url%\.git}"
fi

GIT_ORIGIN_COMMIT_URL_BASE="${GIT_SRC_COMMIT_URL_PREFIX}${GIT_SRC_COMMIT_URL_SUFFIX}"

###############################################################################
# Check the prefix URL (http/s) by calling wget --spider
###############################################################################
if [[ "$GIT_SRC_COMMIT_URL_PREFIX" == *"@"* ]]; then
	# If there's an @ sign, assume SSH-based or invalid for http calls
	wget_exit_stat=7
else
	wget_output=$(wget --spider "${GIT_ORIGIN_COMMIT_URL_BASE}" 2>&1)
	wget_exit_stat=$?
	spinner_pid=$!
	show_spinner $spinner_pid "Check for URL source commit prefix URL: \e[1m${GIT_ORIGIN_COMMIT_URL_BASE}\e[0m ..."

	# Check if error is 301 and treat it as success
	if [ $wget_exit_stat -ne 0 ]; then
		if echo "$wget_output" | grep -q "301 Moved Permanently"; then
			wget_exit_stat=0
		fi
	fi
fi

if [ $wget_exit_stat -ne 0 ]; then
	if [ $wget_exit_stat -eq 7 ]; then
		err_desc="An issue with the protocol. Use URLs with http:// or https:// only!"
	elif [ $wget_exit_stat -eq 8 ]; then
		err_desc="Set parameter -P for a valid commit prefix URL."
	elif [ $wget_exit_stat -eq 1 ]; then
		err_desc=""
	else
		err_desc="Error: $wget_exit_stat"
	fi

	WARN_ORIG_COMMIT="Check for URL source commit prefix failed! URL: [\e[33m${GIT_ORIGIN_COMMIT_URL_BASE}\e[0m]"
	if [[ "$NO_PROGRESS" == "$FALSE" ]]; then
		my_echo -ne "\e[1A[\e[33m!\e[0m] Warning! $WARN_ORIG_COMMIT\n"
	fi
	WARNINGS+=" - $WARN_ORIG_COMMIT\n   Entry of the origin commits was skipped. $err_desc\n"
	GIT_ORIGIN_COMMIT_URL_BASE=""
fi

###############################################################################
# Create a timestamp-based folder inside the deploy directory
###############################################################################
TIME_STAMP="$(date +%Y-%m%d-%H%M%S)"
mkdir -p "$DEPLOY_DIR/$GIT_PROJECT_NAME-$TIME_STAMP"

###############################################################################
# Start rewriting each subdirectory
###############################################################################
for SUBDIR in $REPOLIST; do
	# Copy fresh working copy each loop
	cp -rf "$GIT_TEMP_REPO" "$GIT_WORKING_COPY_DIR"

	cd "$GIT_WORKING_COPY_DIR"

	# If SUBDIR=".", the repo name is derived from the original repo name
	if [[ "$SUBDIR" == "." ]]; then
		GIT_SOURCE=$(my_echo "$GIT_SOURCE_URL" | sed 's/\.git$//')
		REPO_NAME="${TARGET_REPO_PREFIX}$(basename "${GIT_SOURCE}")${TARGET_REPO_SUFFIX}"
	else
		# Otherwise, repo name is derived from the subdirectory
		REPO_NAME="${TARGET_REPO_PREFIX}$(basename "${SUBDIR}")${TARGET_REPO_SUFFIX}"
	fi

	if [[ "$NO_PROGRESS" == "$FALSE" ]]; then
		my_echo -n "[ ] Rewriting ${REPO_NAME}"
	fi

	# If subdirectory doesn't exist and isn't ".", throw an error
	if [ ! -d "$SUBDIR" ] && [ "$SUBDIR" != "." ]; then
		ERR_NOSUBDIR="$SUBDIR not found!"
		my_echo -ne "\r[\e[33m✗\e[0m] Error: $ERR_NOSUBDIR\n"
		ERRORS+=" - $ERR_NOSUBDIR"
		continue
	fi

	# Set path rename so that $SUBDIR is rewritten to the root in the new repo
	PATH_OPTION="--path $SUBDIR --target . --path-rename $SUBDIR/:"
	if [[ "$SUBDIR" == "." ]]; then
		PATH_OPTION=
	fi

	MAILMAP_OPTION=""
	if [ -f "$MAILMAP_FILE" ]; then
		MAILMAP_OPTION="--mailmap $MAILMAP_FILE"
	else
		if [[ "$MAILMAP_FILE" != "" ]]; then
			WARN_NOMAILMAP="Mailmap file not found!"
			my_echo -ne "\r[\e[33m!\e[0m] Warning! $WARN_NOMAILMAP\n"
			WARNINGS+=" - Rewriting: $WARN_NOMAILMAP\n"
		fi
	fi

	COMMIT_OPTIONS="$REPLACE_REVS $PRUNE_EMPTY $PRUNE_DEGENERATE $NO_FF"
	GIT_FILTER_REPO_OPTS="--force $MAILMAP_OPTION $PATH_OPTION --source $GIT_TEMP_REPO $COMMIT_OPTIONS"

	# If commit messages should not be modified
	if [[ "$MESSAGES_REWRITE" != "$TRUE" ]]; then
		$GIT_FILTER_REPO_EXEC $GIT_FILTER_REPO_OPTS > /dev/null 2>&1 &
		spinner_pid=$!
		show_spinner $spinner_pid "Rewriting ${REPO_NAME}"
		NOTES+=" - Commit messages not rewritten"
	else
		############################################################################
		# If rewriting commit messages, we use commit-callback
		############################################################################
		$GIT_FILTER_REPO_EXEC $GIT_FILTER_REPO_OPTS --commit-callback '
		import datetime
		import re
		import os

		workdir = os.environ["WORKDIR"]

		# If --reset is set, remove lines containing "Origin commit data"
		if "'"$RESET"'" == "1":
		    pattern = b"Origin commit data.*(\n.*)*"
		    commit.message = re.sub(pattern, b"", commit.message, flags=re.DOTALL)
		    with open(f"{workdir}/.rewrite", "w") as file:
		        file.write("Commit messages have been reset.")
		    return

		# If commit message already contains "Origin commit data", skip rewriting
		origin_tmp = commit.message.decode("utf-8")
		if "Origin commit data" in origin_tmp:
		    with open(f"{workdir}/.rewrite", "w") as file:
		        file.write("Original commit message(s) have already been rewritten!")
		    return

		# Preserve original message
		origin_message = commit.message
		origin_message_length = len(origin_message)

		# Add an empty line
		commit.message += b"\n\n"

		# Add some data about the original commit
		commit.message += b"Origin commit data\n------------------\n"

		# This line will literally insert the bash code
		commit.message += b"Branch: " + b"'$(git symbolic-ref --short HEAD)'" + b"\n"

		# If GIT_ORIGIN_COMMIT_URL_BASE is not empty, add the link to the commit
		if "'"$GIT_ORIGIN_COMMIT_URL_BASE"'" != "":
		    commit.message += b"Commit: '"$GIT_ORIGIN_COMMIT_URL_BASE"'/" + commit.original_id + b"\n"

		# Insert author name, email, date
		commit.message += (
		    b"Author: " + commit.author_name + b" <" + commit.author_email + b">\n"
		    + b"Date:   "
		    + (datetime.datetime.fromtimestamp(int(commit.author_date.split()[0]))
		       .strftime("%Y-%m-%d (%a, %d %b %Y)") + "\n").encode()
		    + b"\n"
		)

		# Clean up repeated spaces, asterisks, dashes
		commit.message = commit.message.replace(b"   ", b" ")
		commit.message = commit.message.replace(b"  ", b" ")
		commit.message = commit.message.lstrip(b"-")
		commit.message = commit.message.lstrip(b"*")
		commit.message = commit.message.lstrip(b" ")

		# If the original message does not match the start, include it below
		if origin_message != commit.message[:origin_message_length]:
		    commit.message += b"Origin message was:\n------------------\n" + origin_message

		# Only add commit introduction if GIT_COMMIT_INTRO is explicitly set
		if "'"$GIT_COMMIT_INTRO"'" != "":
		    # If rewriting a real subdir, remove it from the first line, and prefix
		    if "'"$SUBDIR"'" != ".":
		        commit.message = commit.message.replace(b"'"$SUBDIR"':", b"")
		    commit.message = b"'"$GIT_COMMIT_INTRO"': " + commit.message
		elif "'"$SUBDIR"'" != ".":
		    # Only add subdirectory prefix if not in root and no explicit intro
		    commit.message = commit.message.replace(b"'"$SUBDIR"':", b"")
		    commit.message = b"'"$(basename $SUBDIR)"': " + commit.message

		# If the original message had only one line, add a note
		if origin_message.count(b"\n") == 1:
		    commit.message += (
		        b"\n------------------\nNo further description and justification available within origin commit message!"
		    )

		# If a commit suffix was specified, append it
		if "'"$GIT_COMMIT_SUFFIX"'" != "":
		    commit.message += b"\n\n------------------\n'"$GIT_COMMIT_SUFFIX"'"

		commit.message = commit.message.replace(b"  ", b" ")
		'  > /dev/null 2>&1 &

		spinner_pid=$!
		show_spinner $spinner_pid "Rewriting ${REPO_NAME}"

		# If .rewrite file was created, read the info
		if [[ -f "$WORKDIR/.rewrite" ]]; then
			read_data=$(< "${WORKDIR}/.rewrite")
			if [[ "$RESET" == "$FALSE" ]]; then
				if [[ "$NO_PROGRESS" == "$FALSE" ]]; then
					my_echo -e "\r[\e[33m!\e[0m] Warning! ${read_data}"
				fi
				WARNINGS+=" - Rewriting: $read_data Commit message(s) kept untouched.\n"
			else
				my_echo -e "\r[\e[32m✓\e[0m] Reset: ${read_data}"
			fi
			rm -f "$WORKDIR/.rewrite"
		fi
	fi

	############################################################################
	# Cleanup: remove the .origin-tmp directory inside the working copy
	############################################################################
	if [[ "$NO_PROGRESS" == "$FALSE" ]]; then
		my_echo -n "[ ] Clean up "
	fi
	rm -rf "$GIT_WORKING_COPY_DIR/$ORIGIN_REPO_NAME"
	if [ $? -eq 0 ]; then
		if [[ "$NO_PROGRESS" == "$FALSE" ]]; then
			my_echo -ne "\r[\e[32m✓\e[0m] Clean up \n"
		fi
	else
		error_code=$?
		my_echo -ne "\r[\e[33m✗\e[0m] Error: $error_code\n"
		ERRORS+="$error_code - Cleanup error"
		break
	fi

	############################################################################
	# Move the working copy to the deployment folder
	############################################################################
	cd "$WORKDIR"

	if [[ "$NO_PROGRESS" == "$FALSE" ]]; then
		my_echo -n "[ ] Deploy"
	fi

	mv "$GIT_WORKING_COPY_DIR" "$DEPLOY_DIR/$GIT_PROJECT_NAME-$TIME_STAMP/$REPO_NAME"
	if [ $? -eq 0 ]; then
		my_echo -ne "\r[\e[32m✓\e[0m] Deploy: Rewritten repository saved in [\e[1m$DEPLOY_DIR/$GIT_PROJECT_NAME-$TIME_STAMP/$REPO_NAME\e[0m]\n"
		generated_repos+=" - $REPO_NAME\n"
	else
		error_code=$?
		my_echo -ne "\r[\e[33m✗\e[0m] Error: $error_code\n"
		ERRORS+="$error_code - Move to deploy folder"
		break
	fi
done

###############################################################################
# Finally, create a symlink pointing to the last created project name
###############################################################################
ln -sf "$DEPLOY_DIR/$GIT_PROJECT_NAME-$TIME_STAMP" "$DEPLOY_DIR/$GIT_PROJECT_NAME"

###############################################################################
# Show results and any notes, warnings or errors
###############################################################################
entry_count=$(grep -o ' - ' <<< "$generated_repos" | wc -l)
my_echo -e
my_echo "Processed repositories: $entry_count"
my_echo -e "$generated_repos"

if [[ "$NOTES" != "" ]]; then
	my_echo -e "------------------------------------------"
	my_echo -e "\e[36mNotes:\e[0m"
	my_echo -e
	my_echo -e "$NOTES"
fi
if [[ "$WARNINGS" != "" ]]; then
	my_echo -e "------------------------------------------"
	my_echo -e "\e[33mWarnings:\e[0m"
	my_echo -e
	my_echo -e "$WARNINGS"
fi
if [[ "$ERRORS" != "" ]]; then
	my_echo -e "------------------------------------------"
	my_echo -e "\e[31mErrors:\e[0m"
	my_echo -e
	my_echo -e "$ERRORS"
fi

# get end time for duration
end=$(date +%s)
duration=$((end - start))
minutes=$((duration / 60))
seconds=$((duration % 60))
my_echo -e "\e[1m\e[32mdone :-)\e[0m"
my_echo -e "elapsed time: $minutes min $seconds sec"
my_echo -e "------------------------------------------"
